# This file contains the parameters for the siever. Parameters such as: 
#   - index -> where/how/what to store
#   - sieve behavior -> 
#       - components (exact, fuzzy)
#       - how each component behaves
#           - what fields to search
#       - number of results to return
# 
# Some parameters are overridable in the function call (e.g. `k`)
# 
# 
# 
# 
# 
# 
# 
grounder {
    index {
        # Whether to cache the documents or not
        # Caching works by indexing each document to its folder. We keep track by storing in a new file (e.g. $cacheDir/.bookkeeping.txt)
        # We keep track from file's contents (md5sum)
        cache = false
        # Where to cache the document (used only if cache=true)
        cacheDir = "./.cache"
    }
    # Defines the behavior of the grounder
    behavior {
        # Describes how the sieve should look like
        sieve {
            # How many results to return (overridable)
            k = 5
            # Details of each component
            # Contains details such as:
            #   - type (this is from a predefined list)
            #   - fieldNames (over which fields will it operate)
            # 
            component1 {
                name = "Exact Matcher"
                type = "exact_matcher"
                # What fields to search on
                # Order is important; Left -> More important (will be searched first)
                # fieldNames = ["name", "synonym1", "synonym2", "synonym3", "synonym4", "synonym5", "synonym6", "synonym7", "synonym8", "synonym9", "synonym10"]
                fieldNames = [["name", "synonym1", "synonym2", "synonym3", "synonym4", "synonym5", "synonym6", "synonym7", "synonym8", "synonym9", "synonym10"], ]
            }
            component2 {
                name = "Fuzzy Matcher"
                type = "fuzzy_matcher"
                # fieldNames = ["name", "synonym1", "synonym2", "synonym3", "synonym4", "synonym5", "synonym6", "synonym7", "synonym8", "synonym9", "synonym10", "description"]
                fieldNames = [["name", "synonym1", "synonym2", "synonym3", "synonym4", "synonym5", "synonym6", "synonym7", "synonym8", "synonym9", "synonym10"], ["description"]]
                slops = [1, 2, 4, 8]
            }
            component3 {
                name = "Neural Matcher"
                type = "neural_matcher"

                modelPath = "/home/rvacareanu/projects_7_2309/skema_python/results/2312/onnx/model.onnx" # Where to load the model from (overridable)
                threshold = 0.5 # Ground based on score (overridable)
            }
        }
    }
}